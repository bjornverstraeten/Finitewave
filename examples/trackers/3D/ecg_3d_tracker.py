
"""
ECG in 3D Slab
==============

This example demonstrates how to use the ECG3DTracker to simulate extracellular
electrograms (pseudo-ECG signals) generated by a 3D cardiac tissue slab 
using the Aliev-Panfilov model.

Overview:
---------
The ECG3DTracker computes simplified ECG-like signals based on the transmembrane 
currents in the tissue and their distance to virtual electrode positions located 
outside the slab.

Simulation Setup:
-----------------
- Tissue: A 3D slab of size 200×200×5.
- Stimulation:
  - A planar voltage stimulus is applied at the bottom edge (y=0 to y=5) at t = 0 ms.
- Measurement:
  - Virtual electrodes are placed above the slab (z = nk + 3).
  - Three positions are used:
      - Center:        [100, 100, 8]
      - Left-center:   [ 50, 100, 8]
      - Bottom-right:  [150, 150, 8]
  - Transmembrane potentials are sampled every 100 time steps.

Tracker:
--------
- ECG3DTracker integrates the contribution of the transmembrane current from all 
  active tissue elements to each measurement point, using a distance-based 
  approximation of the extracellular potential.

Output:
-------
A matplotlib plot showing ECG signals at the three electrode positions over time.
This allows visualizing the propagation of electrical activity through the tissue 
as detected externally.

Applications:
-------------
- Educational visualizations of how wavefronts generate extracellular signals.
- Comparison of ECG morphology at different electrode locations.
- Study of pacing, reentry, or arrhythmic patterns via pseudo-ECG.
"""

import matplotlib.pyplot as plt
import numpy as np

import finitewave as fw

# number of nodes on the side
n = 200
nk = 5

tissue = fw.CardiacTissue3D([n, n, nk])
# create a mesh of cardiomyocytes (elems = 1):

# create model object:
aliev_panfilov = fw.AlievPanfilov3D()
aliev_panfilov.dt = 0.0015
aliev_panfilov.dr = 0.1
aliev_panfilov.t_max = 50

# induce the spiral wave:
stim_sequence = fw.StimSequence()
stim_sequence.add_stim(fw.StimVoltageCoord3D(0, 1,
                                             0, n,
                                             0, 5,
                                             0, nk))

tracker_sequence = fw.TrackerSequence()
# create an ECG tracker:
ecg_tracker = fw.ECG3DTracker()
ecg_tracker.start_time = 0
ecg_tracker.step = 100
ecg_tracker.measure_coords = np.array([[n//2, n//2, nk+3],
                                       [n//4, n//2, nk+3],
                                       [3*n//4, 3*n//4, nk+3]])

tracker_sequence.add_tracker(ecg_tracker)

# add the tissue and the stim parameters to the model object:
aliev_panfilov.cardiac_tissue = tissue
aliev_panfilov.stim_sequence = stim_sequence
aliev_panfilov.tracker_sequence = tracker_sequence

aliev_panfilov.run()

colors = ['tab:blue', 'tab:orange', 'tab:green']
plt.figure()
for i, y in enumerate(ecg_tracker.output.T):
    x = np.arange(len(y)) * aliev_panfilov.dt * ecg_tracker.step
    plt.plot(x, y, '-o', color=colors[i], label='precomputed distances')

plt.legend(title='ECG computed with')
plt.show()